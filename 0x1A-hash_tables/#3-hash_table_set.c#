#include "hash_tables.h"

int hash_table_set(hash_table_t *ht, const char *key, const char *value)
{
	if (key == NULL)
	{
		return 0;
	}

	index = key_index(key, ht->size);

	if (ht->array[index] == NULL)
	{
		new_n = malloc(sizeof(hash_node_t));

		if (new_n == NULL)
			return (0);
		new_n-> key = key;

		if (new_n->key == NULL)
		{
			free(new_n);
			return (0)
		}
		new_n->value = value;

		if (new_n->value == NULL)
		{
			free(new_n->key);
			free(new_n);
			return (0);

		}
		new_n->next = NULL;
		ht->array[index] = new_node;
	}
	else
	{
		tmp = ht->array[index];
		while (tmp != NULL)
		{

			if (strcmp(tmp->key, key) == 0)
			{

				free(tmp->value);
				tmp->value = strdup(value);
				if (tmp->value = NULL)
					return (0);
				return(1);

			}
			tmp = tmp->next;


		}
		new_n = malloc(sizeof(hash_node_t));
		if (new_node = NULL)
			return (0);

		new_node->key = strdup(key);
		if (new_node->key == NULL)
		{


			free(new_node);
			return (0);
		}
		new_node ->value = strdup(value);
		if (new->value == NULL)
		{
			free(new_node->key);
			free(new_node);
			return (0);

		}

		new_node->next = ht->array[index];
		ht->array[index] = new_node;

	}

	return (1);







}

